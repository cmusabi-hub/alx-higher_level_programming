============================================
How to use ``0-add_integer`` module.
============================================

Usage of ``add_integer(...)``.
--------------------------------------------

Importing of the module.
==============================

Importing ``add_integer(a, b=98)``.
--------------------------------------------

::
	>>> add_integer = __import__('0-add_integer').add_integer

Documentation
=============
Checking if documentation is done in the module 
``0-add_integer``
------------------------------------------------------------------

::
	>>> mod_ = __import__("0-add_integer").__doc__
	>>> len(mod_) > 1
	True

Documentation of the function
-------------------------------------------------------------------

::
	>>> fun_t = __import__("0-add_integer").add_integer.__doc__
	>>> len(fun_t) > 1
	True

Numbers
==============
Checking for Numbers passed as parameters
-------------------------------------------------------------------

::
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 8)
	10

::

	>>> add_integer(-10, 8)
	-2

::

	>>> add_integer(30.33, 14.3)
	44

--------------------------------------------------------------------
Since b by default = 98 what if one parameter is passed
--------------------------------------------------------------------

::

	>>> add_integer(12)
	110

===============
Non - Numbers
===============

Checking for Other parameters passed as non numbers
----------------------------------------------------

::

	>>> add_integer(30.2, "five")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

::

	>>> add_integer("ten", 22)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

::

	>>> add_integer("six", "four")
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

::

	>>> add_integer(3.4, None)
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

----------------------------------------------------------
When a function has infinity is provided
----------------------------------------------------------

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(56, float('inf'))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

When a Nan numbers are provided

::

	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer
